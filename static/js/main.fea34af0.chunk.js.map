{"version":3,"sources":["components/todo-list/TodoList.module.css","components/icon/Icon.module.css","app/hooks.ts","components/todo-list/slice.ts","components/icon/Icon.tsx","components/todo/Todo.tsx","components/todo-list/TodoList.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","components/todo/Todo.module.css"],"names":["module","exports","useAppSelector","useSelector","todosSlice","createSlice","name","initialState","todos","inputValue","editInputValue","currentlyEditedTodo","reducers","changeInputValue","state","action","payload","addTodo","unshift","cancelEditing","deleteTodo","slice","concat","startEditingTodo","finishEditingTodo","cancelEditingTodo","changeEditInputValue","actions","selectTodos","selectInputValue","selectEditInputValue","selectCurrentlyEditedTodo","Icon","type","onClick","src","alt","className","styles","icon","Todo","readonly","editValue","onDelete","onEdit","onEditCancel","onEditFinish","onEditStart","icongroup","edit","input","value","onChange","e","target","autoFocus","TodoList","dispatch","useDispatch","useEffect","textbox","placeholder","button","header","length","map","todo","i","newValue","App","basename","to","path","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fea34af0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"TodoList_header__263uO\",\"button\":\"TodoList_button__-uivp\",\"textbox\":\"TodoList_textbox__SsL3e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"Icon_icon__2fGQy\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { RootState } from \"../../app/store\";\n\nexport type Todo = {\n  name: string;\n};\n\nexport type TodosState = {\n  todos: Todo[];\n  inputValue: string;\n  editInputValue: string;\n  currentlyEditedTodo: number | null;\n};\n\nconst initialState: TodosState = {\n  todos: [],\n  inputValue: \"\",\n  editInputValue: \"\",\n  currentlyEditedTodo: null,\n};\n\nexport const todosSlice = createSlice({\n  name: \"todos\",\n  initialState,\n  reducers: {\n    changeInputValue: (state, action: PayloadAction<string>) => {\n      state.inputValue = action.payload;\n    },\n    addTodo: (state) => {\n      if (state.inputValue !== \"\") {\n        state.todos.unshift({ name: state.inputValue });\n        state.inputValue = \"\";\n        cancelEditing(state);\n      }\n    },\n    deleteTodo: (state, action: PayloadAction<number>) => {\n      state.todos = state.todos\n        .slice(0, action.payload)\n        .concat(state.todos.slice(action.payload + 1));\n      cancelEditing(state);\n    },\n    startEditingTodo: (state, action: PayloadAction<number>) => {\n      state.currentlyEditedTodo = action.payload;\n      state.editInputValue = state.todos[action.payload].name;\n    },\n    finishEditingTodo: (state, action: PayloadAction<number>) => {\n      state.todos[action.payload].name = state.editInputValue;\n      cancelEditing(state);\n    },\n    cancelEditingTodo: cancelEditing,\n    changeEditInputValue: (state, action: PayloadAction<string>) => {\n      state.editInputValue = action.payload;\n    },\n  },\n});\n\nfunction cancelEditing(state: TodosState) {\n  state.currentlyEditedTodo = null;\n  state.editInputValue = \"\";\n}\n\nexport const {\n  addTodo,\n  deleteTodo,\n  startEditingTodo,\n  finishEditingTodo,\n  cancelEditingTodo,\n  changeInputValue,\n  changeEditInputValue,\n} = todosSlice.actions;\n\nexport const selectTodos = (state: RootState) => state.todos.todos;\nexport const selectInputValue = (state: RootState) => state.todos.inputValue;\nexport const selectEditInputValue = (state: RootState) =>\n  state.todos.editInputValue;\nexport const selectCurrentlyEditedTodo = (state: RootState) =>\n  state.todos.currentlyEditedTodo;\n\nexport default todosSlice.reducer;\n","import styles from \"./Icon.module.css\";\n\nexport type Props = {\n  type: \"delete\" | \"edit\" | \"tick\" | \"cross\";\n  onClick: () => void;\n};\n\nexport function Icon({ type, onClick }: Props) {\n  return (\n    <img src={`${type}.svg`} alt=\"\" className={styles.icon} onClick={onClick} />\n  );\n}\n","import styles from \"./Todo.module.css\";\nimport { Icon } from \"../icon/Icon\";\n\nexport type Props = {\n  readonly?: boolean;\n  name: string;\n  editValue: string | null;\n  onDelete: () => void;\n  onEdit: (newValue: string) => void;\n  onEditStart: () => void;\n  onEditFinish: () => void;\n  onEditCancel: () => void;\n};\n\nexport function Todo({\n  name,\n  readonly,\n  editValue,\n  onDelete,\n  onEdit,\n  onEditCancel,\n  onEditFinish,\n  onEditStart,\n}: Props) {\n  return (\n    <div className={styles.name}>\n      <div className={styles.icongroup}>\n        {!readonly && editValue !== null && (\n          <span>\n            {/* disable tick on empty input */}\n            {editValue !== \"\" && <Icon type=\"tick\" onClick={onEditFinish} />}\n            <Icon type=\"cross\" onClick={onEditCancel} />\n          </span>\n        )}\n        {!readonly && editValue === null && (\n          <span>\n            <Icon type=\"edit\" onClick={onEditStart} />\n            <Icon type=\"delete\" onClick={onDelete} />\n          </span>\n        )}\n      </div>\n      {name}\n\n      {editValue !== null && (\n        <div className={styles.edit}>\n          <input\n            className={styles.input}\n            value={editValue}\n            onChange={(e) => onEdit(e.target.value)}\n            autoFocus={true}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n","import { useAppSelector, useAppDispatch } from \"../../app/hooks\";\nimport {\n  addTodo,\n  deleteTodo,\n  changeInputValue,\n  changeEditInputValue,\n  startEditingTodo,\n  finishEditingTodo,\n  cancelEditingTodo,\n  selectTodos,\n  selectInputValue,\n  selectEditInputValue,\n  selectCurrentlyEditedTodo,\n} from \"./slice\";\nimport styles from \"./TodoList.module.css\";\nimport { Todo } from \"../todo/Todo\";\nimport { useEffect } from \"react\";\n\nexport type Props = { readonly?: boolean };\n\nexport function TodoList({ readonly }: Props) {\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector<{ name: string }[]>(selectTodos);\n  const inputValue = useAppSelector(selectInputValue);\n  const editInputValue = useAppSelector(selectEditInputValue);\n  const currentlyEditedTodo = useAppSelector(selectCurrentlyEditedTodo);\n\n  // cancel editing whenever component becomes readonly\n  useEffect(() => {\n    if (readonly) {\n      dispatch(cancelEditingTodo());\n    }\n  }, [readonly, dispatch]);\n\n  return (\n    <div>\n      {!readonly && (\n        <div>\n          <input\n            className={styles.textbox}\n            aria-label=\"Set todo\"\n            value={inputValue}\n            onChange={(e) => dispatch(changeInputValue(e.target.value))}\n            placeholder=\"Write todo..\"\n          />\n          <div>\n            <button\n              className={styles.button}\n              onClick={() => dispatch(addTodo())}\n            >\n              Add todo\n            </button>\n          </div>\n        </div>\n      )}\n\n      <h1 className={styles.header}>Your Todos:</h1>\n\n      {!!todos.length && (\n        <div>\n          {todos.map((todo, i) => (\n            <Todo\n              key={`${todo.name}_${i}`}\n              readonly={readonly}\n              name={todo.name}\n              editValue={currentlyEditedTodo === i ? editInputValue : null}\n              onEditCancel={() => dispatch(cancelEditingTodo())}\n              onDelete={() => dispatch(deleteTodo(i))}\n              onEdit={(newValue) => dispatch(changeEditInputValue(newValue))}\n              onEditFinish={() => dispatch(finishEditingTodo(i))}\n              onEditStart={() => {\n                dispatch(startEditingTodo(i));\n              }}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { Switch, Route, BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { TodoList } from \"./components/todo-list/TodoList\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Router basename=\"todos-editable\">\n      <div className=\"container\">\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/view\">View</Link>\n            </li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/view\">\n            <TodoList readonly />\n          </Route>\n          <Route path=\"/\">\n            <TodoList />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import { configureStore, ThunkAction, Action } from \"@reduxjs/toolkit\";\nimport todosSlice from \"../components/todo-list/slice\";\n\nexport const store = configureStore({\n  reducer: {\n    todos: todosSlice,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"name\":\"Todo_name__J5J66\",\"header\":\"Todo_header___uFux\",\"input\":\"Todo_input__2GoiN\",\"icongroup\":\"Todo_icongroup__3eMkA\"};"],"sourceRoot":""}